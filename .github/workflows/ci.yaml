name: Mailer-Deployment

on:
  push:
    branches:
       - master

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Greet user
        run: echo "Welcome Mr Dapo"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set the Node.js version you want

      - name: Install dependencies
        run: npm install

      - name: Build image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/practice-image:1 .

      - name: Verify Docker images
        run: docker images  # List images to verify the build

      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/practice-image:1

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      - name: Scan Docker Image for Vulnerabilities
        env:
          image_name: practice-image
          version: 1
          username: dapper01
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $username/$image_name:$version
          args: --skip-update
        continue-on-error: true  # Allow retries on rate limiting

      - name: Retry Trivy Scan if Rate Limited
        if: failure()
        run: |
          echo "Rate limit hit. Retrying after delay..."
          sleep 60  # Delay before retry
          trivy image --skip-update ${username}/${image_name}:${version} || exit 1

      - name: Run Tests
        run: |
          echo "Running tests..."
          npm test || { echo 'Tests failed'; exit 1; }

      # Upload artifact  
      - name: Create a File
        run: echo "hello from Build job" > file-Build.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-Build
          path: file-Build.txt

      - name: Run SSH
        env:
         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          #Write the SSH private key to a file
            echo "$SSH_PRIVATE_KEY" > ssh_key
            chmod 600 ssh_key  
           #Make sure the key has the right permissions
          #Start the SSH agent
           eval "$(ssh-agent -s)"
          #Add the private key to the agent
                ssh-add ssh_key

          #Connect to the EC2 instance

          ssh -o StrictHostKeyChecking=no ubuntu@ec2-16-171-1-114.eu-north-1.compute.amazonaws.com << 'EOF'
          sudo apt-get update
        
          sudo apt-get install -y ca-certificates curl 
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo docker system prune -a --force
          sudo docker image prune -a --force
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/practice-image:1
          sudo docker run -d -p 8080:80 ${{ secrets.DOCKERHUB_USERNAME }}/practice-image:1
           EOF


  Deploy:
    needs: Build  # Corrected dependency to Build job
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: my-artifact
          pattern: my-artifact-*
          merge-multiple: true

      - run: ls -R my-artifact