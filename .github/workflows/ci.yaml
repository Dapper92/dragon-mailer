name: simple ci

on: 
  push:
    branches:
      - master
jobs:
  simple-ci:
    strategy:
      matrix:
        runs-on: [ubuntu-latest]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: "Build image"
        run: |
          docker build -t dapper92/practice-image:1 .

      - name: "Login to dockerhub"
        run: |
         echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login  -u ${{ secrets.DOCKERHUB_USERNAME }}  --password-stdin

      - name: "Push image to dockerhub"
        run : |
          docker push dapper92/practice-image:1
      
      #access EC2 INSTA
      - name: "Run SSH"
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
            echo "$SSH_KEY" > ssh_key & chmod 600 ssh_key
            ssh -o StrictHostKeyChecking=no -i ssh_key ubuntu@ec2-54-163-51-217.compute-1.amazonaws.com '

            sudo apt-get update &&
            sudo apt-get install -y ca-certificates curl &&
            sudo install -m 0755 -d /etc/apt/keyrings &&
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc &&
            sudo chmod a+r /etc/apt/keyrings/docker.asc &&
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
            sudo apt-get update &&
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &&
            sudo docker system prune -a --force &&
            sudo docker image prune -a --force &&
            sudo docker pull oluwaseun7/simple-ci:latest &&
            sudo docker run -d -p 8080:80 oluwaseun7/simple-ci:latest    
                 
      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      - name: Scan Docker Image for Vulnerabilities
        env:
          image_name: test-image
          version: 1.0.0
          username: dapper01
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $username/$image_name:$version
          args: --skip-update
        continue-on-error: true  # Allow retries on rate limiting

      # Retry Mechanism if Rate Limited
      - name: Retry Trivy Scan if Rate Limited
        if: failure()
        run: |
          echo "Rate limit hit. Retrying after delay..."
          sleep 60  # Delay before retry
          trivy image --skip-update ${username}/${image_name}:${version} || exit 1
          
      - name: Run Tests
        run: |
          echo "Running tests..."
          npm test || { echo 'Tests failed'; exit 1; }


  #upload artifact  
      - name: Create a File
        run: echo "hello from ${{ matrix.runs-on }}" > file-${{ matrix.runs-on }}.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
         name: my-artifact-${{ matrix.runs-on }}
         path: file-${{ matrix.runs-on }}.txt
  

  #Download artifact
  Deploy:
    needs: simple-ci
    runs-on: ubuntu-latest
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: my-artifact
        pattern: my-artifact-*
        merge-multiple: true
    - run: ls -R my-artifact

      
          
   :
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub Account
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Pull and Deploy Docker Image
        env:
          image_name: test-image
          version: 1.0.0
          username: dapper01
        run: |
          docker pull $username/$image_name:$version
          docker run -d -p 8080:80 $username/$image_name:$version

